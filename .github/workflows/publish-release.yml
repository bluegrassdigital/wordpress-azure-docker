name: Publish GitHub Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v2025.08.21)"
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: bluegrassdigital/wordpress-azure-sync
    steps:
      - name: Determine tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ inputs.tag }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ steps.tag.outputs.tag }}

      - name: Extract release notes from CHANGELOG
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          awk "/^#### ${TAG}\$/{flag=1;next}/^#### /{flag=0}flag" CHANGELOG.md > RELEASE_NOTES.md
          echo "Release notes generated for $TAG:" && cat RELEASE_NOTES.md

      - name: Append image tag references
        env:
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          set -euo pipefail
          COMMIT_SHA="${{ github.sha }}"
          VERSIONS=(8.3 8.4)
          DOCKER_HUB_BASE="https://hub.docker.com/r/${IMAGE_NAME}/tags?name="

          # Find previous release tag for compare link
          PREV_TAG=$(git tag --list 'v*' --sort=-creatordate | awk -v cur="$TAG" 'BEGIN{found=0} { if(found==1){ print $0; exit } if($0==cur){ found=1 } }')

          # Prepend compare link if previous tag exists
          if [ -n "${PREV_TAG:-}" ]; then
            tmpfile=$(mktemp)
            printf "### Changes since last release\n\n[Compare %s...%s](https://github.com/%s/compare/%s...%s)\n\n" "$PREV_TAG" "$TAG" "${GITHUB_REPOSITORY}" "$PREV_TAG" "$TAG" > "$tmpfile"
            cat RELEASE_NOTES.md >> "$tmpfile"
            mv "$tmpfile" RELEASE_NOTES.md
          fi

          {
            printf "\n### Images and tags\n\n"
            for V in "${VERSIONS[@]}"; do
              # Resolve full PHP version by querying the built image (best-effort)
              FULL_PROD=$(docker run --rm "$IMAGE_NAME:$V-build-$COMMIT_SHA" php -r 'echo PHP_VERSION;' 2>/dev/null || echo "unknown")
              FULL_DEV=$(docker run --rm "$IMAGE_NAME:$V-dev-stable" php -r 'echo PHP_VERSION;' 2>/dev/null || echo "unknown")

              printf -- "- PHP %s\n" "$V"
              printf "  - Prod: [\`%s:%s-latest\`](%s%s-latest), [\`%s:%s-stable\`](%s%s-stable), [\`%s:%s-build-%s\`](%s%s-build-%s), [\`%s:%s\`](%s%s)\n" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$FULL_PROD" "$DOCKER_HUB_BASE" "$FULL_PROD"
              printf "  - Dev:  [\`%s:%s-dev-latest\`](%s%s-dev-latest), [\`%s:%s-dev-stable\`](%s%s-dev-stable), [\`%s:%s-dev\`](%s%s-dev)\n" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$V" "$DOCKER_HUB_BASE" "$V" \
                "$IMAGE_NAME" "$FULL_DEV" "$DOCKER_HUB_BASE" "$FULL_DEV"
              printf "\n"
            done
          } >> RELEASE_NOTES.md
          printf "Appended image tags and compare link (if available).\n"

      - name: Trivy scan (prod 8.3)
        uses: aquasecurity/trivy-action@0.32.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_NAME }}:8.3-build-${{ github.sha }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'table'
          output: trivy-8.3-prod.txt
          exit-code: '0'

      - name: Trivy scan (dev 8.3)
        uses: aquasecurity/trivy-action@0.32.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_NAME }}:8.3-dev-stable
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'table'
          output: trivy-8.3-dev.txt
          exit-code: '0'

      - name: Trivy scan (prod 8.4)
        uses: aquasecurity/trivy-action@0.32.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_NAME }}:8.4-build-${{ github.sha }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'table'
          output: trivy-8.4-prod.txt
          exit-code: '0'

      - name: Trivy scan (dev 8.4)
        uses: aquasecurity/trivy-action@0.32.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_NAME }}:8.4-dev-stable
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'table'
          output: trivy-8.4-dev.txt
          exit-code: '0'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: RELEASE_NOTES.md
          files: |
            trivy-8.3-prod.txt
            trivy-8.3-dev.txt
            trivy-8.4-prod.txt
            trivy-8.4-dev.txt
          make_latest: true

